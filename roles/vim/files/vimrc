set nocompatible              " be iMproved, required
filetype off                  " required

" Show the (partial) command as it's being typed
set showcmd

" Show current mode down the bottom
set showmode

" Enable line numbers
" set number

" Show 'invisible' characters
set listchars=tab:>-,trail:~,extends:>,precedes:<,nbsp:.
set list

" Enable syntax highlighting
syntax enable

" Disable error bells
set noerrorbells

"""" Start of Vundle related items

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'rodjek/vim-puppet'
Plugin 'flazz/vim-colorschemes'
Plugin 'docker/docker' , {'rtp': '/contrib/syntax/vim/'}
Plugin 'fatih/vim-go'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"""" End of Vundle related items

" Default status line
hi statusline ctermfg=15 ctermbg=102

" Format status line
set laststatus=2         " always show the status line
set statusline=\ [%n]    " buffer number
" set statusline+=\ %f     " relative path to the current file
set statusline+=\ %t     " tail of the file name
set statusline+=\ [%{strlen(&fenc)?&fenc:'none'},  " file encoding
set statusline+=%{&ff}]  " file format
set statusline+=\ %h     " help file flag
set statusline+=%m       " modified flag
set statusline+=%r       " read only flag
set statusline+=[%{empty(&filetype)?'none':&filetype}] " filetype or 'none'
set statusline+=%=       " left/right separator
set statusline+=(%l,     " row
set statusline+=%c\ %L)  " cursor column
set statusline+=\ %P     " percent through file

" Searching
set incsearch   " incremental search
set hlsearch    " highlight search items
set ignorecase  " case-insensitive searches

" Remove access to the arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Respect modeline in files
set modeline
set modelines=1

" Map the <leader> key to ,
let mapleader = ","

" Enable hidden buffers by default (doesn't bother you
" when switching back and forth)
set hidden

" Enhance command-line completion
set wildmenu

" Optimize for fast terminal connections
set ttyfast

" Don't reset cursor to start of line when moving around.
set nostartofline

" Show the cursor position
set ruler

" Don't show the intro message when starting Vim
set shortmess=atI

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Use the distinguised colorscheme
" colorscheme railscasts

" Disable some misc vim-go defaults
let g:go_play_open_browser = 0
let g:go_fmt_fail_silently = 1
let g:go_fmt_autosave = 0
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
autocmd filetype go set listchars=tab:\ \ ,trail:~,extends:>,precedes:<,nbsp:.

" Set some filetypes depending on the file extension
autocmd BufNewFile,BufRead *.pp setfiletype puppet
