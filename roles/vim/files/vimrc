set nocompatible              " be iMproved, required
filetype off                  " required

" Show the (partial) command as it's being typed
set showcmd

" Show current mode down the bottom
set showmode

" Enable line numbers
" set number

" Show 'invisible' characters
set listchars=tab:>-,trail:~,extends:>,precedes:<,nbsp:.
set list

" Enable syntax highlighting
syntax enable

" Disable error bells
set noerrorbells

" Don't wrap lines
set nowrap

" Wrapping, line breaking. Commented for ease of discovery.
"
" Together, the following options tell vim to wrap lines visually (via wrap),
" and only break at characters in the breakat option (via linebreak).
" `set list` will display `$` at EOL, ^I for tabs, and stuff in `listchars`.
" You need to disable it in order for wrapping to work.
" Prevent vim from automatically inserting lines (via textwidth=0,
" wrapmargin=0)
" See http://vim.wikia.com/wiki/Word_wrap_without_line_breaks
"
" set wrap
" set linebreak
" set nolist
" set textwidth=0
" set wrapmargin=0
"
"
" For wrapping via newlines, set textwidth:
"
" set textwidth=80

" let backspace work past eol, etc
set backspace=indent,eol,start

"""" Start of Vundle related items

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'rodjek/vim-puppet'
Plugin 'docker/docker' , {'rtp': '/contrib/syntax/vim/'}
Plugin 'fatih/vim-go'
Plugin 'vim-ruby/vim-ruby'
Plugin 'altercation/vim-colors-solarized'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'elixir-editors/vim-elixir'
Plugin 'leafgarland/typescript-vim', {'for': 'typescript'}
Plugin 'hashivim/vim-terraform', {'for': 'terraform'}
Plugin 'ledger/vim-ledger', {'for': 'ledger'}


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Put your non-Plugin stuff after this line

"""" End of Vundle related items

" Default status line
hi statusline ctermfg=15 ctermbg=102

" Format status line
set laststatus=2         " always show the status line
"filetype,  filename, modified, column, line, total lines
set statusline=%Y\ %f\ %M%=%c,%l\/%L

" Searching
set incsearch   " incremental search
set hlsearch    " highlight search items
set ignorecase  " case-insensitive searches
"make $ and . into word separators
set iskeyword-=$
set iskeyword-=.


" Remove access to the arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" shortcut to insert date
" not in insert mode
:nnoremap <F5> "=strftime("%Y-%m-%d")<CR>P
" in insert mode
:inoremap <F5> <C-R>=strftime("%Y-%m-%d")<CR>


" Respect modeline in files
set modeline
set modelines=1

" Map the <leader> key to ,
let mapleader = " "

" Enable hidden buffers by default (doesn't bother you
" when switching back and forth)
set hidden

" Enhance command-line completion
set wildmenu

" Optimize for fast terminal connections
set ttyfast

" Don't reset cursor to start of line when moving around.
set nostartofline

" Show the cursor position
set ruler

" Don't show the intro message when starting Vim
set shortmess=atI

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Use the distinguised colorscheme
" colorscheme railscasts

" alias W to w
command W w

" set the grep program to git-grep. no color so as not to confuse parser
set grepprg=git\ grep\ --no-color\ -n
" <space>-{j,k} goes to next/previous search result
map <Leader>j :cnext<CR>
map <Leader>k :cprev<CR>

" keep moar history
set history=100

" use , as : it the hopes of saving my pinky
nmap , :

" highlight the 81th column
set colorcolumn=81
hi colorcolumn ctermbg=darkgrey

" Disable some misc vim-go defaults
let g:go_play_open_browser = 0
let g:go_fmt_fail_silently = 1
let g:go_fmt_autosave = 0
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
autocmd filetype go set listchars=tab:\ \ ,trail:~,extends:>,precedes:<,nbsp:.

" Set some filetypes depending on the file extension
autocmd BufNewFile,BufRead *.pp setfiletype puppet
autocmd BufRead,BufNewFile *.twig set filetype=jinja
autocmd BufRead,BufNewFile *.handlebars,*.hbs set ft=html syntax=handlebars
autocmd BufRead,BufNewFile *.html.erb set ft=html syntax=erb
autocmd BufRead,BufNewFile *.go set ft=go
autocmd BufRead,BufNewFile Vagrantfile set filetype=ruby
autocmd BufRead,BufNewFile *.md,*.markdown set filetype=markdown
autocmd BufRead,BufNewFile *.ex,*exs set filetype=elixir
autocmd BufRead,BufNewFile *.ledger set filetype=ledger
autocmd BufRead,BufNewFile *.tf set filetype=terraform
autocmd BufRead,BufNewFile *.yaml,*.yml set filetype=yaml

" save swapfiles in ~/.swp
set dir=~/.swp
