# vim: set filetype=sh :

#****************
# Shell options
#****************

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Do not autocomplete hidden files unless the pattern explicitly begins with a dot
set match-hidden-files off

# Show all autocomplete results at once
set page-completions off

# If there are more than 200 possible completions for a word, ask to show them all
set completion-query-items 200

# Show extra file information when completing, like `ls -F` does
set visible-stats on

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on
set convert-meta off

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

shopt -s checkwinsize

#***************
# Bash Exports
#***************

# Set the terminal type to xterm-256color
export TERM=xterm-256color

# Make vim the default editor
export EDITOR="vim"

# Larger bash history
export HISTSIZE=2000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
# Make some commands not show up in history
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# Prefer US English and use UTF-8
export LANG="en_US"
export LC_ALL="en_US.UTF-8"

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

# Donâ€™t clear the screen after quitting a manual page
export MANPAGER="less -X"

# Always enable colored `grep` output
export GREP_OPTIONS="--color=auto"

# Fancy ls colors
export CLICOLOR='Yes'
export LSCOLORS='ExGxCxDxBxegedabagacad'

# Prevent 'less' from
export LESS="-i -R"
export LESSHISTFILE='/dev/null'
export LESSHISTSIZE=0

# List and kill off tmux sessions
alias tls='tmux ls'
alias tks='tmux kill-session -t '

# Alias git to g
alias g="git"

# Docker related aliases
alias drm="docker rm -f"
alias dps="docker ps"
alias db="devbox"

#**************
# Bash Prompt
#**************

function __prompt_command() {
  local EXIT="$?"
  PS1=""

  # Set the terminal title
  echo -ne "\033]0;${HOSTNAME}\007"

  local RED="\[$(tput setaf 1)\]"
  local GREEN="\[$(tput setaf 2)\]"
  local YELLOW="\[$(tput setaf 3)\]"
  local BLUE="\[$(tput setaf 4)\]"
  local MAGENTA="\[$(tput setaf 5)\]"
  local CYAN="\[$(tput setaf 6)\]"
  local WHITE="\[$(tput setaf 7)\]"
  local BOLD="\[$(tput bold)\]"
  local UNDERLINE="\[$(tput sgr 0 1)\]"
  local RESET="\[$(tput sgr0)\]"
  local PROMPTCOL="${YELLOW}"

  if [ -f '/.dockerinit' ]; then
    # We're inside a docker environment
    PS1+="\n${GREEN}"
  elif [ `id -u` == 0 ]; then
    # Bright red prompt if root
    PS1+="\n${RED}"
  else
    PS1+="\n${PROMPTCOL}"
  fi

  # Second line of bash prompt
  if [ -f '/.dockerinit' ]; then
    # We're inside a docker environment
    PS1+="[docker-\H: \t]${RESET}${PROMPTCOL} \w${RESET}\n"
  else
    PS1+="[\H: \t]${RESET}${PROMPTCOL} \w${RESET}\n"
  fi

  # Print out the last exit code, if it wasn't zero
  if [ $EXIT != 0 ]; then
    PS1+="${RED}[${EXIT}]${RESET} "
  fi

  # Finally print out a $ or #, depending on uid
  PS1+="${PROMPTCOL}\\$ ${RESET}"
}

export PROMPT_COMMAND=__prompt_command  # Func to gen PS1 after CMDs

# Function to delete all docker containers
function drma() {
  docker rm -f $(docker ps -aq)
  docker rmi $(docker images | grep "^<none>" | awk "{print $3}")
}

# Bash function to attach to, or spin up a new (named) docker container
function devbox () {
  local boxname=$1
  local dockerimage=$2

  if [ -z "$boxname" ]; then
    echo "usage: devbox <box name> [docker image]"
    return 1
  fi

  if [ -z "$dockerimage" ]; then
    dockerimage="marvin/devbox"
  fi

  local dockerid=$(docker ps -aq --filter=name=$boxname)
  if [ "$dockerid" != "" ]; then
    echo "Attaching to existing docker container ${dockerid}"
  else
    echo "Creating new docker container"
    dockerid=$(docker run -dit \
      -e "HOSTNAME=${boxname}" \
      --name $boxname \
      --hostname ${boxname} \
      -v /home/marvin:/var/shared \
      -v $(dirname $SSH_AUTH_SOCK):$(dirname $SSH_AUTH_SOCK) \
      -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK \
      ${dockerimage})
  fi
  docker exec -it $dockerid /bin/bash
}
