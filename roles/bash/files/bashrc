# vim: set filetype=sh :

#****************
# Shell options
#****************

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Do not autocomplete hidden files unless the pattern explicitly begins with a dot
set match-hidden-files off

# Show all autocomplete results at once
set page-completions off

# If there are more than 200 possible completions for a word, ask to show them all
set completion-query-items 200

# Show extra file information when completing, like `ls -F` does
set visible-stats on

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on
set convert-meta off

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

shopt -s checkwinsize

#***************
# Bash Exports
#***************

# Set the terminal type to xterm-256color
export TERM=xterm-256color

# Make vim the default editor
export EDITOR="vim"

# Larger bash history
export HISTSIZE=2000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups:ignorespace
# Make some commands not show up in history
export HISTIGNORE="ls:cd:cd -:pwd:exit:date"

# Prefer US English and use UTF-8
export LANG="en_US"
export LC_ALL="en_US.UTF-8"

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

# Don't clear the screen after quitting a manual page
export MANPAGER="less -X"

# Always enable colored `grep` output
export GREP_OPTIONS="--color=auto"

# Fancy ls colors
export CLICOLOR='Yes'
export LSCOLORS='ExGxCxDxBxegedabagacad'

# Prevent 'less' from
export LESS="-i -R"
export LESSHISTFILE='/dev/null'
export LESSHISTSIZE=0

# only run `homebrew update` every week
export HOMEBREW_AUTO_UPDATE_SECS=604800

#***************
# Bash Aliases
#***************

# git
alias g="git"
function git-home() {
  git config user.name 'des4maisons'
  git config user.email 'des4maisons+github@gmail.com'
}

alias cp='cp -i'
alias ls='ls -F'
alias mv='mv -i'
alias rm='rm -i'

# bundler
alias b="bundle exec"

# knife
alias k="bundle exec knife"

# gpg
alias gpg-list-keys="gpg --list-keys"
alias gpg-encrypt="gpg --encrypt -a"
alias gpg-decrypt="gpg --decrypt"

# openssl / certificates
# show info about certificate signing request
alias req='openssl req -text -noout -in'
# show info (from CA) about certificate
alias cert='openssl x509 -text -noout -in'
# show info about a certificate key
alias key='openssl rsa -text -noout -in'

# desktop icons
alias desktop-clear='defaults write com.apple.finder CreateDesktop false && killall Finder'
alias desktop-restore='defaults write com.apple.finder CreateDesktop true && killall Finder'

# camera
alias camera-restart="sudo killall VDCAssistant"

# audio processing
# extract audio from a video
function extract-audio() {
  local input=$1
  local output=$2
  docker run --rm -it -v $(pwd):/workdir linuxserver/ffmpeg \
   -i "/workdir/$input" \
   "/workdir/$output"
}

#************
# GPG agent
#************

if [ -f "${HOME}/.gnupg/gpg-agent-info" ]; then
  . "${HOME}/.gnupg/gpg-agent-info"
  export GPG_AGENT_INFO
  export SSH_AUTH_SOCK
fi

#***********
# Bash
#***********

# Function to delete all docker containers
function drma() {
  docker rm -f $(docker ps -aq)
  docker rmi $(docker images | grep "^<none>" | awk "{print $3}")
}

# Bash function to attach to, or spin up a new (named) docker container
function devbox () {
  local boxname=$1
  local dockerimage=$2

  if [ -z "$boxname" ]; then
    echo "usage: devbox <box name> [docker image]"
    return 1
  fi

  if [ -z "$dockerimage" ]; then
    dockerimage="marvin/devbox"
  fi

  local dockerid=$(docker ps -aq --filter=name=$boxname)
  if [ "$dockerid" != "" ]; then
    echo "Attaching to existing docker container ${dockerid}"
  else
    echo "Creating new docker container"
    dockerid=$(docker run -dit \
      -e "HOSTNAME=${boxname}" \
      --name $boxname \
      --hostname ${boxname} \
      -v /home/marvin:/var/shared \
      -v $(dirname $SSH_AUTH_SOCK):$(dirname $SSH_AUTH_SOCK) \
      -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK \
      ${dockerimage})
  fi
  docker exec -it $dockerid /bin/bash
}


#****************
# PS1
#****************

git_prompt_vars ()
{
    local ref=$(git symbolic-ref HEAD 2> /dev/null);
    SCM_BRANCH=${ref#refs/heads/};
    echo -e "$SCM_BRANCH"
}

make_color ()
{
    pre_color="\[\033[";
    post_color="m\]";
    echo -e "${pre_color}$1${post_color}"
}

blue=$(make_color "0;34")
purple=$(make_color "0;35")
reset=$(make_color "0;0")
green=$(make_color "0;32")

# when a process exits with nonzero status,
# show a sad face and the exit code
ps1_status ()
{
    local status=$?;
    if [ $status -ne 0 ]; then
        smiley=":(";
    else
        smiley=":)";
    fi;
    echo -e "$smiley $status"
}

PS1="\n${blue}\$(ps1_status) ${purple}\u @ \h ${reset}in ${green}\w\n| \$(git_prompt_vars) | $ ${reset}"
export PS1

PATH="$PATH:${HOME}/bin"
PATH="$PATH:/usr/sbin"
PATH="/usr/local/bin:$PATH"
PATH="/usr/local/sbin:$PATH"
PATH="$PATH:${HOME}/Library/Python/3.7/bin"
export PATH

# load rbenv shims
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

#### Golang
# For more info on GOPATH, see go help gopath
export GOPATH="${HOME}/projects/go-workspace"
PATH="${PATH}:${GOPATH}/bin"


#*************
# Sumo
#*************

sumo () {
  ( cd ~/.livetail; unbuffer ./livetail $@; )
}

#*************
# extras
#*************

[ -f ${HOME}/.bash_extras ] && . ${HOME}/.bash_extras

export KUBECONFIG=$KUBECONFIG:~/.kube/config-marg-eks
